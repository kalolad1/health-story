from django.db import models
from datetime import date, datetime, timedelta
from django.utils import timezone
from measurement.measures import Weight, Distance
from django_measurement.models import MeasurementField
from .helper.constants import MPConstants
from .helper import choices


class Patient(models.Model):
    # Demographic information
    username = models.CharField(max_length=30)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    date_of_birth = models.DateField()
    email = models.CharField(max_length=75, blank=True)
    sex = models.CharField(max_length=50, blank=True)
    race = models.CharField(max_length=50, blank=True)

    # Vital information
    weight = MeasurementField(measurement=Weight, null=True)
    height = MeasurementField(measurement=Distance, null=True)

    # The following fields are calculated without user input.
    date_created = models.DateField(default=timezone.now)

    # Family history
    relatives = models.ManyToManyField('Relative')

    # The physician code expires in a short amount of time.
    # TODO make into a single object
    physician_code = models.CharField(max_length=30, blank=True)
    physician_code_created = models.DateTimeField(null=True, blank=True)

    # Admin mode is set to true when a physician logs in. This allows the physician
    # to modify information or add new health encounters.
    admin_mode = models.BooleanField(default=False)

    def __str__(self):
        """Returns the string representation of the patient object.

        Returns:
            string: Full name of the patient.
        """
        return self.get_full_name()

    def get_full_name(self):
        """Returns the full name of the patient.

        Returns:
            string: The full name of the patient.
        """
        return self.first_name + " " + self.last_name

    def get_age(self):
        """Calculates the age of the patient based on their date of birth.

        Returns:
            int: The age of the patient.
        """
        days_old = (date.today() - self.date_of_birth).days
        return days_old // 365

    def get_date_of_first_visit_formatted(self):
        """Formats the date of the patients first visit in a readable way.

        Returns:
            string: The date of the first visit.
        """
        return self.date_created.strftime("%b %e %Y")

    def get_date_of_birth_formatted(self):
        """Formats the date of birth of the patient.

        Returns:
            The date of the first visit in a readable format.
        """
        return self.date_of_birth.strftime("%b %e %Y")

    def get_height_formatted(self):
        """Formats the height from inches to ft inches format.

        Returns:
            A formatted string representing the patients height.
        """
        try:
            feet = int(self.height.inch) // 12
            inches = self.height.inch - float(feet * 12)
        except AttributeError:
            feet = -1
            inches = -1

        if inches != 0:
            return "{feet} ft {inches} inches".format(feet=feet, inches=inches)
        else:
            return "{feet} ft".format(feet=feet)

    def is_physician_code_valid(self, physician_code):
        """Checks if a physician code is valid to access this patients account.

        A physician code is generated by the user and expires after 1 hour (3600 seconds).
        After that time, the physician will no longer be able to access the patients
        health information.
        """
        if physician_code != self.physician_code:
            return False

        expiration_time = 3600
        time_elapsed = self.physician_code_created - datetime.now(timezone.utc)
        if not self.physician_code_created or time_elapsed.total_seconds() > expiration_time:
            return False

        return True

    def get_physician_code_expiration_time(self):
        if not self.physician_code:
            return "Physician code does not exist."

        expiration = self.physician_code_created + timedelta(hours=1)
        return expiration.strftime('%c')

    def get_all_patient_info(self):
        """Retrieves medications and conditions for that patient.

        Iterates through all of the patients health encounters and pulls
        out the medications and conditions. Call this function when the user
        logs in for the first time and store with cookie.

        Returns:
             A dictionary containing patient data.
        """
        # Retrieve all medications from all health encounters the patient had.
        medications = []
        conditions = []
        for encounter in self.healthencounter_set.all():
            medications.extend(encounter.medications.all())
            conditions.extend(encounter.conditions.all())

        return {'medications': medications, 'conditions': conditions}

    def get_info_for_ui(self, page):
        """This function organizes patient information into an array to be used in the ui.

        Collects information and stores it into an array of tuples.
        The first tuple value is the type of information and the second
        is its value. Tuples instead of dicts were chosen to retain ordering (useful
        for UI purposes).

        Returns:
             Array of tuples containing patient data and title.
        """
        data = []
        if page == MPConstants.DEMOGRAPHICS:
            data = [('Date of Birth', self.get_date_of_birth_formatted()),
                    ('Sex', self.sex), ('Race', self.race), ('Email', self.email)]

        elif page == MPConstants.VITALS:
            data = [('Weight (lb)', self.weight.lb), ('Height (m)', self.height)]

        return data

    @staticmethod
    def is_user_registered(username):
        try:
            Patient.objects.get(username=username)
            return True
        except Patient.DoesNotExist:
            return False


class HealthEncounter(models.Model):
    # Parties involved.
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)
    # TODO Make actually object.
    physician = models.CharField(max_length=100)

    date = models.DateField(default=timezone.now)
    location = models.CharField(max_length=100)

    type_of_encounter = models.CharField(max_length=100, choices=choices.TYPE_OF_HEALTH_ENCOUNTER)

    # The following fields comprise the physician clinical note
    description = models.CharField(max_length=100)
    conditions = models.ManyToManyField('Condition')
    medications = models.ManyToManyField('Medication')

    def __str__(self):
        """Returns a string representation of a HealthEncounter object.

        Returns:
             The patient name, physician name, and date.
        """
        return self.patient.get_full_name() + " with " + self.physician + " on " + self.date_formatted()

    def date_formatted(self):
        """Formats the date of the Health Encounter in a readable way.

        Returns:
            The date of the Health Encounter.
        """
        return self.date.strftime("%b %d %Y")

    def he_type_fa_icon(self):
        """Returns the fa icon name according to the health encounter type.

        Returns:
            Fa icon name.
        """
        return choices.HE_TO_ICON[self.type_of_encounter]

    def formatted_description(self):
        """Returns a formatted description including conditions and medications.

        Returns:
            A formatted description string.
        """
        description = ""
        description += "Conditions identified: {}.\n".format(self.get_comma_separated_string_from_query_set(
            self.conditions.all()
        ))
        description += "Medications prescribed: {}.\n".format(self.get_comma_separated_string_from_query_set(
            self.medications.all()
        ))
        description += self.description
        return description

    @staticmethod
    def get_comma_separated_string_from_query_set(query_set):
        query_string = ""
        for query in query_set:
            query_string += query.name

            if query != query_set.last():
                query_string += ", "
        return query_string


class Relative(models.Model):
    full_name = models.CharField(max_length=100)
    type_of_relationship = models.CharField(max_length=100, choices=choices.TYPE_OF_RELATIONSHIP, blank=True)
    conditions = models.ManyToManyField('Condition')

    def __str__(self):
        """
        Returns a string representation of a Relative object.

        Returns:
             The relatives name.
        """
        return self.full_name

    def get_formatted_list_of_conditions(self):
        output = ""
        for condition in self.conditions.all():
            output += "{}, ".format(condition.name)

        return output[:-2]


class Medication(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        """
        Returns a string representation of a Medication object.

        Returns:
             The medication's name.
        """
        return self.name


class Condition(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        """
        Returns a string representation of a Condition object.

        Returns:
             The conditions's name.
        """
        return self.name
